%%% ==========================================================================
%%% Copyright 2015 Silent Circle
%%%
%%% Licensed under the Apache License, Version 2.0 (the "License");
%%% you may not use this file except in compliance with the License.
%%% You may obtain a copy of the License at
%%%
%%%     http://www.apache.org/licenses/LICENSE-2.0
%%%
%%% Unless required by applicable law or agreed to in writing, software
%%% distributed under the License is distributed on an "AS IS" BASIS,
%%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%%% See the License for the specific language governing permissions and
%%% limitations under the License.
%%% ==========================================================================

%%%-------------------------------------------------------------------
%%% @author Edwin Fine <efine@silentcircle.com>
%%% @copyright 2015-2016 Silent Circle
%%% @doc `apns_recs' uses the `exprecs' parse transform to convert record
%%% definitions to a set of functions that operate on the record in an opaque
%%% manner. This avoids compile-time dependencies on the records.
%%%
%%% This module exports the following functions, generated by `exprecs':
%%%
%%% ```
%%% '#exported_records-'/0
%%% '#fromlist-'/2
%%% '#fromlist-apns_error'/1
%%% '#fromlist-apns_error'/2
%%% '#fromlist-apns_notification'/1
%%% '#fromlist-apns_notification'/2
%%% '#fromlist-cert_info'/1
%%% '#fromlist-cert_info'/2
%%% '#get-'/2
%%% '#get-apns_error'/2
%%% '#get-apns_notification'/2
%%% '#get-cert_info'/2
%%% '#info-'/1
%%% '#info-'/2
%%% '#info-apns_error'/1
%%% '#info-apns_notification'/1
%%% '#info-cert_info'/1
%%% '#is_record-'/1
%%% '#is_record-'/2
%%% '#lens-'/2
%%% '#lens-apns_error'/1
%%% '#lens-apns_notification'/1
%%% '#lens-cert_info'/1
%%% '#new-'/1
%%% '#new-apns_error'/0
%%% '#new-apns_error'/1
%%% '#new-apns_notification'/0
%%% '#new-apns_notification'/1
%%% '#new-cert_info'/0
%%% '#new-cert_info'/1
%%% '#pos-'/2
%%% '#pos-apns_error'/1
%%% '#pos-apns_notification'/1
%%% '#pos-cert_info'/1
%%% '#set-'/2
%%% '#set-apns_error'/2
%%% '#set-apns_notification'/2
%%% '#set-cert_info'/2
%%% '''
%%%
%%% == Generic Function Operations ==
%%%
%%% <dl>
%%%   <dt>`` '#exported_records-' ''</dt> <dd>Returns list of exported record names</dd>
%%%   <dt>`` '#new-' ''</dt> <dd>Creates a new record</dd>
%%%   <dt>`` '#get' ''</dt> <dd>Retrieves given attribute values from a record</dd>
%%%   <dt>`` '#set' ''</dt> <dd>Sets given attribute values in a record</dd>
%%%   <dt>`` '#fromlist' ''</dt> <dd>Creates a record from a key-value list</dd>
%%%   <dt>`` '#info' ''</dt> <dd>Equivalent to record_info/2</dd>
%%%   <dt>`` '#pos' ''</dt> <dd>Returns the position of a given attribute</dd>
%%%   <dt>`` '#is_record' ''</dt> <dd>Tests if a value is a specific record</dd>
%%%   <dt>`` '#convert' ''</dt> <dd>Converts an old record to the current version</dd>
%%%   <dt>`` '#prop' ''</dt> <dd>Used only in type specs</dd>
%%%   <dt>`` '#attr' ''</dt> <dd>Used only in type specs</dd>
%%%   <dt>`` '#lens' ''</dt> <dd>Returns a 'lens' (an accessor pair) as described in
%%%              [http://github.com/jlouis/erl-lenses]</dd>
%%% </dl>
%%%
%%% == Example 1: Generic Functions ==
%%%
%%% This is an example of the generic functions being used for the exported records.
%%%
%%% ```
%%% apns_recs:'#exported_records-'() ->
%%%   [apns_notification,apns_error,cert_info]
%%%
%%% apns_recs:'#fromlist-'([{cmd,atom_data},
%%%                         {id,1},
%%%                         {expire,1},
%%%                         {token,<<"binary_data">>},
%%%                         {payload,<<"binary_data">>},
%%%                         {priority,1},
%%%                         {rest,<<"binary_data">>}],
%%%                         {apns_notification,simple,0,0,<<>>,<<>>,5,<<>>}) ->
%%%   {apns_notification,atom_data,1,1,<<"binary_data">>,<<"binary_data">>,1,
%%%                      <<"binary_data">>}
%%%
%%% apns_recs:'#get-'([cmd,id,expire,token,payload,priority,rest],
%%%                   {apns_notification,simple,0,0,<<>>,<<>>,5,<<>>}) ->
%%%   [simple,0,0,<<>>,<<>>,5,<<>>]
%%%
%%% apns_recs:'#info-'(apns_notification) ->
%%%   [cmd,id,expire,token,payload,priority,rest]
%%%
%%% apns_recs:'#info-'(apns_notification, fields) ->
%%%   [cmd,id,expire,token,payload,priority,rest]
%%%
%%% apns_recs:'#info-'(apns_notification, size) ->
%%%   8
%%%
%%% apns_recs:'#is_record-'({apns_notification,simple,0,0,<<>>,<<>>,5,<<>>}) ->
%%%   true
%%%
%%% apns_recs:'#is_record-'(apns_notification,
%%%                         {apns_notification,simple,0,0,<<>>,<<>>,5,<<>>}) ->
%%%   true
%%%
%%% apns_recs:'#lens-'(cmd, apns_notification) ->
%%%   {#Fun<apns_recs.8.63329237>,#Fun<apns_recs.9.63329237>}
%%%
%%% apns_recs:'#new-'(apns_notification) ->
%%%   {apns_notification,simple,0,0,<<>>,<<>>,5,<<>>}
%%%
%%% apns_recs:'#pos-'(apns_notification, cmd) ->
%%%   2
%%%
%%% apns_recs:'#set-'([{cmd,atom_data},
%%%                    {id,1},
%%%                    {expire,1},
%%%                    {token,<<"binary_data">>},
%%%                    {payload,<<"binary_data">>},
%%%                    {priority,1},
%%%                    {rest,<<"binary_data">>}],
%%%                    {apns_notification,simple,0,0,<<>>,<<>>,5,<<>>}) ->
%%%   {apns_notification,atom_data,1,1,<<"binary_data">>,<<"binary_data">>,1,
%%%                      <<"binary_data">>}
%%%
%%% apns_recs:'#exported_records-'() ->
%%%   [apns_notification,apns_error,cert_info]
%%%
%%% apns_recs:'#fromlist-'([{id,1},{status,atom_data},{status_code,1},{status_desc,<<"binary_data">>}], {apns_error,0,undefined,0,<<>>}) ->
%%%   {apns_error,1,atom_data,1,<<"binary_data">>}
%%%
%%% apns_recs:'#get-'([id,status,status_code,status_desc], {apns_error,0,undefined,0,<<>>}) ->
%%%   [0,undefined,0,<<>>]
%%%
%%% apns_recs:'#info-'(apns_error) ->
%%%   [id,status,status_code,status_desc]
%%%
%%% apns_recs:'#info-'(apns_error, fields) ->
%%%   [id,status,status_code,status_desc]
%%%
%%% apns_recs:'#info-'(apns_error, size) ->
%%%   5
%%%
%%% apns_recs:'#is_record-'({apns_error,0,undefined,0,<<>>}) ->
%%%   true
%%%
%%% apns_recs:'#is_record-'(apns_error, {apns_error,0,undefined,0,<<>>}) ->
%%%   true
%%%
%%% apns_recs:'#lens-'(id, apns_error) ->
%%%   {#Fun<apns_recs.20.63329237>,#Fun<apns_recs.21.63329237>}
%%%
%%% apns_recs:'#new-'(apns_error) ->
%%%   {apns_error,0,undefined,0,<<>>}
%%%
%%% apns_recs:'#pos-'(apns_error, id) ->
%%%   2
%%%
%%% apns_recs:'#set-'([{id,1},{status,atom_data},{status_code,1},{status_desc,<<"binary_data">>}], {apns_error,0,undefined,0,<<>>}) ->
%%%   {apns_error,1,atom_data,1,<<"binary_data">>}
%%%
%%% apns_recs:'#exported_records-'() ->
%%%   [apns_notification,apns_error,cert_info]
%%%
%%% apns_recs:'#fromlist-'([{issuer_cn,<<"binary_data">>},
%%%                         {is_production,false},
%%%                         {bundle_id,<<"binary_data">>},
%%%                         {bundle_seed_id,<<"binary_data">>}],
%%%                         {cert_info,<<>>,false,<<>>,<<>>}) ->
%%%   {cert_info,<<"binary_data">>,false,<<"binary_data">>,<<"binary_data">>}
%%%
%%% apns_recs:'#get-'([issuer_cn,is_production,bundle_id,bundle_seed_id], {cert_info,<<>>,false,<<>>,<<>>}) ->
%%%   [<<>>,false,<<>>,<<>>]
%%%
%%% apns_recs:'#info-'(cert_info) ->
%%%   [issuer_cn,is_production,bundle_id,bundle_seed_id]
%%%
%%% apns_recs:'#info-'(cert_info, fields) ->
%%%   [issuer_cn,is_production,bundle_id,bundle_seed_id]
%%%
%%% apns_recs:'#info-'(cert_info, size) ->
%%%   5
%%%
%%% apns_recs:'#is_record-'({cert_info,<<>>,false,<<>>,<<>>}) ->
%%%   true
%%%
%%% apns_recs:'#is_record-'(cert_info, {cert_info,<<>>,false,<<>>,<<>>}) ->
%%%   true
%%%
%%% apns_recs:'#lens-'(issuer_cn, cert_info) ->
%%%   {#Fun<apns_recs.28.63329237>,#Fun<apns_recs.29.63329237>}
%%%
%%% apns_recs:'#new-'(cert_info) ->
%%%   {cert_info,<<>>,false,<<>>,<<>>}
%%%
%%% apns_recs:'#pos-'(cert_info, issuer_cn) ->
%%%   2
%%%
%%% apns_recs:'#set-'([{issuer_cn,<<"binary_data">>},
%%%                    {is_production,false},
%%%                    {bundle_id,<<"binary_data">>},
%%%                    {bundle_seed_id,<<"binary_data">>}],
%%%                    {cert_info,<<>>,false,<<>>,<<>>}) ->
%%%  {cert_info,<<"binary_data">>,false,<<"binary_data">>,<<"binary_data">>}
%%%
%%% '''
%%%
%%% == Example 2: cert_info functions ==
%%%
%%% This is an example of record-specific functions.
%%%
%%% ```
%%% apns_recs:'#fromlist-cert_info'([{issuer_cn,<<"binary_data">>},
%%%  {is_production,false},
%%%  {bundle_id,<<"binary_data">>},
%%%  {bundle_seed_id,<<"binary_data">>}]) ->
%%%   {cert_info,<<"binary_data">>,false,<<"binary_data">>,<<"binary_data">>}
%%%
%%% apns_recs:'#fromlist-cert_info'([{issuer_cn,<<"binary_data">>},
%%%  {is_production,false},
%%%  {bundle_id,<<"binary_data">>},
%%%  {bundle_seed_id,<<"binary_data">>}], {cert_info,<<>>,false,<<>>,<<>>}) ->
%%%   {cert_info,<<"binary_data">>,false,<<"binary_data">>,<<"binary_data">>}
%%%
%%% apns_recs:'#get-cert_info'([issuer_cn,is_production,bundle_id,bundle_seed_id], {cert_info,<<>>,false,<<>>,<<>>}) ->
%%%   [<<>>,false,<<>>,<<>>]
%%%
%%% apns_recs:'#info-cert_info'(fields) ->
%%%   [issuer_cn,is_production,bundle_id,bundle_seed_id]
%%%
%%% apns_recs:'#info-cert_info'(size) ->
%%%   5
%%%
%%% apns_recs:'#lens-cert_info'(issuer_cn) ->
%%%   {#Fun<apns_recs.28.63329237>,#Fun<apns_recs.29.63329237>}
%%%
%%% apns_recs:'#new-cert_info'() ->
%%%   {cert_info,<<>>,false,<<>>,<<>>}
%%%
%%% apns_recs:'#new-cert_info'([{issuer_cn,<<"binary_data">>},
%%%  {is_production,false},
%%%  {bundle_id,<<"binary_data">>},
%%%  {bundle_seed_id,<<"binary_data">>}]) ->
%%%   {cert_info,<<"binary_data">>,false,<<"binary_data">>,<<"binary_data">>}
%%%
%%% apns_recs:'#pos-cert_info'(issuer_cn) ->
%%%   2
%%%
%%% apns_recs:'#set-cert_info'([{issuer_cn,<<"binary_data">>},
%%%  {is_production,false},
%%%  {bundle_id,<<"binary_data">>},
%%%  {bundle_seed_id,<<"binary_data">>}], {cert_info,<<>>,false,<<>>,<<>>}) ->
%%%   {cert_info,<<"binary_data">>,false,<<"binary_data">>,<<"binary_data">>}
%%%
%%% '''
%%%
%%% @reference See
%%% [https://github.com/uwiger/parse_trans/blob/master/doc/exprecs.md]
%%% for more information.
%%%
%%% @end
%%%====================================================================
-module(apns_recs).
-compile({parse_transform, exprecs}).

%% @type cmd_type() = simple | enhanced | v2.
-type cmd_type() :: simple | enhanced | v2.

%%--------------------------------------------------------------------
%% @type apns_notification() = #apns_notification {
%%         cmd      = cmd_type(),
%%         id       = integer(),
%%         expire   = integer(),
%%         token    = binary(),
%%         payload  = binary(),
%%         priority = non_neg_integer(),
%%         rest     = binary()
%%       }.
%% @end
%%--------------------------------------------------------------------
-record(apns_notification, {
        cmd      = simple :: cmd_type(),
        id       = 0      :: integer(),
        expire   = 0      :: integer(),
        token    = <<>>   :: binary(),
        payload  = <<>>   :: binary(),
        priority = 5      :: non_neg_integer(),
        rest     = <<>>   :: binary()
    }).

%%--------------------------------------------------------------------
%% @type apns_error() = #apns_error {
%%         id          = integer(),
%%         status      = atom(),
%%         status_code = integer(),
%%         status_desc = binary()
%%       }.
%% @end
%%--------------------------------------------------------------------
-record(apns_error, {
        id          = 0         :: integer(),
        status      = undefined :: atom(),
        status_code = 0         :: integer(),
        status_desc = <<>>      :: binary() % binary string
    }).

%%--------------------------------------------------------------------
%% @type cert_info() = #cert_info {
%%         issuer_cn = binary(),
%%         is_production = boolean(),
%%         bundle_id = binary(),
%%         bundle_seed_id = binary()
%%       }.
%% @end
%%--------------------------------------------------------------------
-record(cert_info, {
        issuer_cn = <<>> :: binary(),
        is_production = false :: boolean(),
        bundle_id = <<>> :: binary(),
        bundle_seed_id = <<>> :: binary()
    }).

-export_records([apns_notification, apns_error, cert_info]).

%%====================================================================
%% This rather elaborate set of help functions is very useful when
%% debugging records, because the function names and what they do
%% are somewhat opaque and not that easy to remember.
%%
%% It was also used in this documentation to generate sample calls
%% and results of the generic functions and one record.
%%====================================================================
-export([help/0, help/1, help/2]).

-define(HELP(RecName),
        (fun() ->
                 Rec = rec_new(RecName),
                 RecFields = rec_fields(RecName),
                 RecProps = rec_props(RecName),
                 [
                  {apns_recs, paste("#fromlist-", RecName), [RecProps]},
                  {apns_recs, paste("#fromlist-", RecName), [RecProps, Rec]},
                  {apns_recs, paste("#get-", RecName), [RecFields, Rec]},
                  {apns_recs, paste("#info-", RecName), [fields]},
                  {apns_recs, paste("#info-", RecName), [size]},
                  {apns_recs, paste("#lens-", RecName), [hd(RecFields)]},
                  {apns_recs, paste("#new-", RecName), []},
                  {apns_recs, paste("#new-", RecName), [RecProps]},
                  {apns_recs, paste("#pos-", RecName), [hd(RecFields)]},
                  {apns_recs, paste("#set-", RecName), [RecProps, Rec]}
                 ]
         end)()
    ).

%%--------------------------------------------------------------------
%% @doc Show help for help(). This is intended for debugging and
%% documentation.
%% @end
%%--------------------------------------------------------------------
-spec help() -> ok.
help() ->
    Msg = "help()                Show this help\n"
          "help(all)             Show example runs of all record functions.\n"
          "help(generic)         Show example runs of generic record functions.\n"
          "help(records)         Return list of exported records.\n"
          "help(Recname)         Show example runs of all functions related to Recname\n"
          "help(Funcname)        Show example run of function Funcname\n"
          "help(Recname, funcs)  Return list of 'fun/arity' for this Recname.\n"
          "\n",
    io:put_chars(Msg).

%%--------------------------------------------------------------------
%% @doc Show help for exported records and functions.
%% This is intended for debugging and documentation.
%% @end
%%--------------------------------------------------------------------
-type rec_name() :: atom().
-type func_name() :: atom().
-type func_spec() :: atom().
-type help_name() :: func_name() | rec_name().
-type help_result() :: ok | undefined | [rec_name()].

-spec help(Item) -> Result
    when Item :: all | generic | records | help_name(),
         Result :: help_result().
help(X) when is_list(X) ->
    help(list_to_atom(X));
help(all) ->
    print_help(all_help_mfa());
help(generic) ->
    print_help(generic_help());
help(records) ->
    apns_recs:'#exported_records-'();
help(X) when is_atom(X)->
    print_help(find_mfa(X)).

%%--------------------------------------------------------------------
%% @doc Return a list of function specs for the given `Recname'.
%% A function spec is the usual func/arity as an atom, e.g.
%% `` '#new-cert_info/0' ''.
%% This is intended for debugging and documentation.
%% @end
%%--------------------------------------------------------------------
-spec help(Recname, funcs) -> Result
    when Recname :: rec_name(),
         Result :: [func_spec()] | undefined.
help(Recname, funcs) when is_atom(Recname) ->
    case help_mfa(Recname) of
        undefined ->
            undefined;
        MFAs ->
            [mfa_to_funcspec(MFA) || MFA <- MFAs]
    end.

help_mfa(cert_info) -> ?HELP(cert_info);
help_mfa(apns_notification) -> ?HELP(apns_notification);
help_mfa(apns_error) -> ?HELP(apns_error);
help_mfa(_) -> undefined.

all_help_mfa() ->
    generic_help() ++ all_recs_help().

all_recs_help() ->
    lists:flatmap(fun(R) -> help_mfa(R) end,
                  apns_recs:'#exported_records-'()).

print_help(undefined) ->
    io:put_chars("Unknown record or function.\n"),
    undefined;
print_help({_,_,_} = MFA) ->
    io:put_chars(execp(MFA));
print_help(MFAs) when is_list(MFAs) ->
    io:put_chars([execp(MFA) || MFA <- MFAs]).

find_mfa(X) when is_atom(X) ->
    case help_mfa(X) of
        undefined ->
            find_func_mfa(X);
        [{_,_,_}|_] = MFAs ->
            MFAs
    end.

find_func_mfa(Funcname) when is_atom(Funcname) ->
    case funcspec_to_fa(Funcname) of
        {Fn, Arity} ->
            find_func_fa(Fn, Arity);
        undefined ->
            undefined
    end.

find_func_fa(Fn, Arity) when is_atom(Fn), is_integer(Arity) ->
    case [MFA || {_,F,A} = MFA <- all_help_mfa(),
                 F == Fn, Arity == length(A)] of
        [MFA] ->
            MFA;
        [] ->
            undefined
    end.

execp({M, F, A} = MFA) ->
    io_lib:format("~s ->~n  ~p~n~n", [mfa_to_s(MFA), erlang:apply(M, F, A)]).

mfa_to_funcspec({_M, F, A}) ->
    list_to_atom(atom_to_list(F) ++ "/" ++ integer_to_list(length(A))).

funcspec_to_fa(Funcspec) when is_atom(Funcspec) ->
    funcspec_to_fa(atom_to_list(Funcspec));
funcspec_to_fa(Funcspec) ->
    case string:tokens(Funcspec, "/") of
        [Fn, SArity] ->
            {list_to_atom(Fn), list_to_integer(SArity)};
        _ ->
            undefined
    end.

mfa_to_s({M, F, A}) ->
    io_lib:format("~p:~p(~s)", [M, F, args_to_s(A)]).

args_to_s(Args) ->
    string:join([io_lib:format("~p", [Arg]) || Arg <- Args], ", ").

generic_help() ->
    L = [generic_help(RecName) || RecName <- '#exported_records-'()],
    lists:flatten(L).

generic_help(RecName) ->
    Rec = rec_new(RecName),
    RecFields = rec_fields(RecName),
    RecProps = rec_props(RecName),
    [
     {apns_recs, '#exported_records-', []},
     {apns_recs, '#fromlist-', [RecProps, Rec]},
     {apns_recs, '#get-', [RecFields, Rec]},
     {apns_recs, '#info-', [RecName]},
     {apns_recs, '#info-', [RecName, fields]},
     {apns_recs, '#info-', [RecName, size]},
     {apns_recs, '#is_record-', [Rec]},
     {apns_recs, '#is_record-', [RecName, Rec]},
     {apns_recs, '#lens-', [hd(RecFields), RecName]},
     {apns_recs, '#new-', [RecName]},
     {apns_recs, '#pos-', [RecName, hd(RecFields)]},
     {apns_recs, '#set-', [RecProps, Rec]}
    ].

rec_new(RecName) ->
    '#new-'(RecName).

rec_fields(RecName) ->
    '#info-'(RecName, fields).

rec_val(FieldName, Rec) ->
    '#get-'(FieldName, Rec).

rec_props(RecName) ->
    Rec = rec_new(RecName),
    [{Field, sample_data(rec_val(Field, Rec))}
     || Field <- rec_fields(RecName)].

sample_data(X) when is_binary(X) -> <<"binary_data">>;
sample_data(X) when is_boolean(X) -> X;
sample_data(X) when is_atom(X) -> atom_data;
sample_data(X) when is_integer(X) -> 1;
sample_data(X) when is_float(X) -> 1.0;
sample_data(X) when is_list(X) -> "list_data";
sample_data(X) when is_pid(X) -> self();
sample_data(X) when is_tuple(X) -> X;
sample_data(X) -> X.

paste(Pref, Suff) ->
    list_to_atom(to_s(Pref) ++ to_s(Suff)).

to_s(X) when is_atom(X) -> atom_to_list(X);
to_s(X) when is_list(X) -> X.

